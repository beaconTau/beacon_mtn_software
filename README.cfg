If you want to add a new thing to the configuration file, and you don't want to wait for me to do it, the steps are: 

1) add the variable to the proper struct in beacon_cfg.h (e.g. beacon_acq_cfg_t). 

2) add a default initialization in beacon_acq_config_init (or the proper function) 

3) add the command to parse it in beacon_acq_config_read (or the proper function). This will likely be something like 

config_lookup_int(&cfg,"section.new_var", &c->new_var) 

It doesn't have to be called the same thing in the config file as in the struct, but it's probably easier if it is. If you have a non-integer then you can follow one of the other examples. I think the libconfig documentation is under /usr/share/doc/libconfig-doc on the beaglebone. 

4) add a way of generating a config file with the correct value to beacon_acq_config_write (or the proper function). This literally just prints the config file with comments. libconfig can generate the config file on its own, but it wouldn't have any comments so that's why I do this hacky thing.  You just need to add a line in the right section that is something like: 
  
    fprintf(f,"   // this is some var\n"); 
    fprintf(f,"   some_var = %d;\n\n", c->some_var); 
 

5) Update the config file to have the new variable (or use beacon-make-default-config to generate one automatically with the defaults). 



There are a few programs that you might find helpful: 

beacon-make-default-config acq|startup|hk|copy out.cfg
         
    will write the appropriate config file to out.cfg using all the values specified in the beacon_XXX_config_init(); 

beacon-check-config acq|startup|hk|copy in.cfg out.cfg
               
    will parse in.cfg as the appropriate type and write it to out.cfg (you can use /dev/stdout as out.cfg if you want to print to screen). Then you can diff in.cfg and out.cfg to see if things are properly passed through. 

