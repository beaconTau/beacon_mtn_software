// config file for beacon-acq
// not all options are changeable by restart

// settings related to threshold  / trigger control
// These all can be set without restarting
control:
{
   // scaler goals for each beam, desired rate ( in Hz)
   scaler_goal = {
     beam0 : 0.75;
     beam1 : 0.75;
     beam2 : 0.75;
     beam3 : 0.75;
     beam4 : 0.75;
     beam5 : 0.75;
     beam6 : 0.75;
     beam7 : 0.75;
     beam8 : 0.75;
     beam9 : 0.75;
     beam10 : 0.75;
     beam11 : 0.75;
     beam12 : 0.75;
     beam13 : 0.75;
     beam14 : 0.75;
     beam15 : 0.75;
     beam16 : 0.75;
     beam17 : 0.75;
     beam18 : 0.75;
     beam19 : 0.75;
     beam20 : 0;
     beam21 : 0;
     beam22 : 0;
     beam23 : 0;
    };

   // fixed thresholds for each beam (in case of use_fixed_thresholds)
   fixed_threshold = {
     beam0 : 20000;
     beam1 : 20000;
     beam2 : 20000;
     beam3 : 20000;
     beam4 : 20000;
     beam5 : 20000;
     beam6 : 20000;
     beam7 : 20000;
     beam8 : 20000;
     beam9 : 20000;
     beam10 : 20000;
     beam11 : 20000;
     beam12 : 20000;
     beam13 : 20000;
     beam14 : 20000;
     beam15 : 20000;
     beam16 : 20000;
     beam17 : 20000;
     beam18 : 20000;
     beam19 : 20000;
     beam20 : 0;
     beam21 : 0;
     beam22 : 0;
     beam23 : 0;
    };

   //the beams allowed to participate in the trigger
   trigger_mask = 0xffffff;

   // the channels on the master allowed to participate in the trigger
   channel_mask = 0xff;

   // enable on-board dynamic masking
   enable_dynamic_masking = 1;

   // dynamic masking threshold
   dynamic_masking_threshold = 5;

   // dynamic masking holdoff
   dynamic_masking_holdoff = 100;

   // use fixed thresholds (don't servo!) 
   use_fixed_thresholds = 0;

   // pid loop proportional term
   k_p = 10;

   // pid loop integral term
   k_i = 0.1;

   // pid loop differential term
   k_d = 0;

   // puts a floor on the thresholds
   min_threshold=1000;

   // max threshold increase per step 
   max_threshold_increase=500;

   //monitoring interval, for PID loop (in seconds)
   monitor_interval = 1;

   // software trigger interval (in seconds)
   sw_trigger_interval = 1;

   // randomize sw trigger interval (using exponential distribution)
   randomize_sw_trigger = 0;

   //enable the phased trigger readout
   enable_phased_trigger = 1;

   // Polarization for triggering, current options are "H", "V"
   // @see config_lookup_pol in beacon-cfg.c
   // @see beacon_trigger_polarization_t in beacondaq.h in libbeacon
   trigger_polarization = "H";
   //delay for phased trigger to start
   secs_before_phased_trigger = 20;

   //weight of fast scaler in pid loop
   fast_scaler_weight = 0.7;

   //weight of slow scaler in pid loop
   slow_scaler_weight = 0.3;

   //number of fast scalers to average
   n_fast_scaler_avg = 20;

   //Whether or not to subtract off gated scalers
   subtract_gated = 1;

   //File to persist the status info (primarily for saving thresholds between restarts)
   status_save_file = "/beacon/last.st.bin"

   // load thresholds from status file on start.
   load_thresholds_from_status_file=1

   //The pulse width of the veto (in units of 1/31.25 MHz)
   veto_pulse_width = 48;

   //Enable the saturation veto 
   enable_saturation_cut = 1; 

   //The cut value for the saturation (default 124)
   saturation_cut_value = 124; 

   //Enable the CW (via delay+sum)  veto 
   enable_cw_cut = 1; 

   //The cut value for the cw (default 50)
   cw_cut_value = 50; 

   //Enable the sideswipe vet
   enable_sideswipe_cut = 1; 

   //Sideswipe cut value (default 15)
   sideswipe_cut_value = 15; 

   //Enable the extended cut
   enable_extended_cut = 1; 

   //The value of the extended cut (default 50)
   extended_cut_value = 50;

};

// settings related to the acquisition
// Not all of these can be set without restarting
device: 
{
  //spi devices, master first, requires restart to change
  spi_device = "/dev/spidev1.0"; 

  // circular buffer capacity. In-memory storage in between acquisition and writing. Requires restart.
  buffer_capacity = 256;

  //the length of a waveform, in samples. 
  waveform_length = 512;

  //the pretrigger window length, in hardware units
  pretrigger = 6;

  //calpulser state, 0 (off) , 2 (baseline)  or 3 (calpulser)
  calpulser_state = 0;

  // Whether or not to enable the trigger output
  enable_trigout = 1;

  // Whether or not to enable external trigger input
  enable_extin = 1;

  // Trigger delay on external input, in units of us. Will be rounded to nearest 128 ns. Values above 8,388.608 us will wrap around...
  extin_trig_delay_us = 500.2;

  // The width of the trigger output in 40 ns intervals
  trigout_width = 3;

  // Whether or not to disable the trigger output on exit
  disable_trigout_on_exit = 1;

  //spi clock speed, MHz
  spi_clock = 20;

  // True to apply attenuations 
  apply_attenuations = 0;

  // attenuation, per channel, if applied. 
  attenuation =  {ch0: 0;  ch1: 0;  ch2: 0;  ch3: 0;  ch4: 0;  ch5: 0;  ch6: 0;  ch7: 0;  } ;

  //which channels to digitize
  channel_read_mask = 0xff; 

  //command used to run the alignment program.
  alignment_command="cd /home/nuphase/nuphase_python/;  python align_adcs_beacon.py",

  //channel trig delays (right now can be 0-3)
  trig_delays = {
     ch0 : 0;
     ch1 : 0;
     ch2 : 0;
     ch3 : 0;
     ch4 : 0;
     ch5 : 0;
     ch6 : 0;
     ch7 : 0;
  };

  //Enable the low pass to trigger.
  enable_low_pass_to_trigger = 1; 

};

//settings related to output
output: 
{
  // Run file, used to persist run number
  run_file = "/beacon/runfile";

  // output directory, data will go here
  output_directory = "/data/" ;

  //print to screen interval (0 to disable)
  print_interval = 10;

  // run length, in seconds
  run_length = 10800; 

  //events per output file
  events_per_file = 1000;

  //statuses per output file
  status_per_file = 200;

  //realtime priority setting. If 0, will use non-realtime priority. Otherwise, SCHED_FIFO is used with the given priority
  realtime_priority = 20;

  //Interval between polling SPI link for data. 0 to just sched_yield
  poll_usecs = 500;

  // Colon separated list of paths to copy (recursively) into run dir at start of run
  copy_paths_to_rundir = "/home/beacon/beacon_python/output:/proc/loadavg";

  //Whether or not to copy configs into run dir
  copy_configs = 1;
};

//settings related to power on/off
power:
{
  // If device isn't ready (too cold!) how long to wait until powering on
  try_again_sleep_amount=600;

  // Check if the device power is on at startup and intermittently
  check_power_on = 0;

  // The current threshold used to determine if the device is on or not
  adc_threshold_for_on = 1000;

  // Automatically power on if off an battery voltage is ok at startup
  auto_power_on = 0;

  // Automatically power off is the battery voltage is not ok
  auto_power_off = 0;

  // Time interval to check power on and if battery is too low (should be more than hk interval)
  power_monitor_interval = 20;

  // How many times the battery is allowed to return zero before considering it a failure mode
  nzero_threshold_to_turn_off = 3;

  // charge controller battery voltage threshold before auto turn off (ored with inv)
  cc_voltage_to_turn_off = 48;

  // inverter battery voltage threshold before auto turn off (ored with cc)
  inv_voltage_to_turn_off = 48;

  // charge controller battery voltage threshold before auto turn on (anded with inv)
  cc_voltage_to_turn_on = 52;

  // inverter battery voltage threshold before auto turn on (anded with cc)
  inv_voltage_to_turn_on = 52;

  //command to power on everything (called when using auto power on)
  power_on_command = "$HOME/scripts/turnAllOn.sh";

  //command to power off everything (called when using auto power off and check power on)
  power_off_command = "$HOME/scripts/turnAllOff.sh";

};

