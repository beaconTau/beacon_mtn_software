// config file for nuphase-acq
// not all options are changeable by restart

// settings related to threshold  / trigger control
// These all can be set without restarting
control:
{
   // scaler goals for each beam, desired rate ( in Hz)
   scaler_goal = {
     beam0 : 1.5;
     beam1 : 1.5;
     beam2 : 1.5;
     beam3 : 1.5;
     beam4 : 1.5;
     beam5 : 1.5;
     beam6 : 1.5;
     beam7 : 1.5;
     beam8 : 1.5;
     beam9 : 1.5;
     beam10 : 1.5;
     beam11 : 1.5;
     beam12 : 1.5;
     beam13 : 1.5;
     beam14 : 1.5;
    };

   //the beams allowed to participate in the trigger
   trigger_mask = 0x7fff;

   // the channels on the master allowed to participate in the trigger
   channel_mask = 0xff;

   // pid loop proportional term
   k_p = 10;

   // pid loop integral term
   k_i = 0.5;

   // pid loop differential term
   k_d = 0;

   //monitoring interval, for PID loop (in seconds)
   monitor_interval = 2;

   // software trigger interval (in seconds)
   sw_trigger_interval = 1;

   //enable the phased trigger readout
   enable_phased_trigger = 1;

   //delay for phased trigger to start
   secs_before_phased_trigger = 0;

   //weight of fast scaler in pid loop
   fast_scaler_weight = 0.9;

   //weight of slow scaler in pid loop
   slow_scaler_weight = 0.1;

  //number of fast scalers to average
  n_fast_scaler_avg = 20;

  //File to persist the status info (primarily for saving thresholds between restarts)
  status_save_file = "/nuphase/last.st.bin"

  // load thresholds from status file on start.
  load_thresholds_from_status_file=1; 

};

// settings related to the acquisition
// Not all of these can be set without restarting
device: 
{
  //spi devices, master first, requires restart to change
  spi_devices = ("/dev/spidev2.0", "/dev/spidev1.0"); 

  // circular buffer capacity. In-memory storage in between acquisition and writing. Requires restart.
  buffer_capacity = 100;

  //the length of a waveform, in samples. 
  waveform_length = 512;

  //the pretrigger window length, in hardware units
  pretrigger = 4;

  //calpulser state, 0 (off) , 2 (baseline)  or 3 (calpulser)
  calpulser_state = 0;

  // Whether or not to enable the external triggers
  enable_trigout = 1;

  //spi clock speed, MHz
  spi_clock = 20;

  // True to apply attenuations 
  apply_attenuations = 0;

  // attenuation, per channel, if applied. 
  attenuation = ( 
               {ch0: 9;  ch1: 3;  ch2: 11;  ch3: 8;  ch4: 7;  ch5: 19;  ch6: 11;  ch7: 3;  } ,
               {ch0: 23;  ch1: 10;  ch2: 27;  ch3: 27;  ch4: 0;  ch5: 0;  ch6: 0;  ch7: 0;  } ) ;

  //which channels to digitize
  channel_read_mask = (0xff, 0xf); 

  //command used to run the alignment program.
  alignment_command= "cd /home/nuphase/nuphase-python/; python align_adcs.py -m";

};

//settings related to output
output: 
{
  // Run file, used to persist run number
  run_file = "/nuphase/runfile";

  // output directory, data will go here
  output_directory = "/data/" ;

  //print to screen interval (0 to disable)
  print_interval = 2;

  // run length, in seconds
  run_length = 3600; 

  //events per output file
  events_per_file = 1000;

  //statuses per output file
  status_per_file = 200;

};

